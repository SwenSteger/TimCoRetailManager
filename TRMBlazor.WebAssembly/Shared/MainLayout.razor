@inherits LayoutComponentBase
@inject IApiHelper ApiHelper
@inject ILoggedInUserModel LoggedInUserModel
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

<div>
	<Navigation IsAuthenticated="@IsAuthenticated" Username="@Username" />

	<main id="content-container" class="container content-container">
		<article class="content px-4 bg-content">
			@if (IsLoading)
			{
				<Loading />
			}
			else if (NotFound)
			{
				<NotFound />
			}
			else if (IsAuthenticated)
			{
				@Body
			}
			else
			{
				<LoginMessage/>
			}
		</article>
	</main>

	<Footer></Footer>
</div>

@code {
	[CascadingParameter] public bool NotFound { get; set; }

	private bool IsLoading { get; set; } = true;
	private string Username { get; set; } = "user";
	private bool IsAuthenticated => LoggedInUserModel?.IsAuthenticated ?? false;

	protected override async Task OnInitializedAsync()
	{
		NavigationManager.LocationChanged += HandleLocationChanged;
		
		await Task.Delay(1000); // Simulate loading time
		await ValidateToken();
		IsLoading = false;
		StateHasChanged();
	}

	private async void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
	{
		Console.WriteLine($"URL of new location: {e.Location}");
		IsLoading = true;
		StateHasChanged();
		
		if (!e.IsNavigationIntercepted)
			await Task.Delay(1000); // Simulate loading time
		
		IsLoading = false;
		StateHasChanged();
	}

	public void Dispose()
	{
		NavigationManager.LocationChanged -= HandleLocationChanged;
	}

	private async Task ValidateToken()
	{
		var token = await LocalStorage.GetItemAsync<string>("authToken");
		if (token != null)
		{
			await ApiHelper.GetLoggedInUserInfo(token);
			Username = LoggedInUserModel.FirstName;
		}
	}
}

