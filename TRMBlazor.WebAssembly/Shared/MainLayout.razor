@using TRMFrontEnd.Library.Exceptions
@inherits LayoutComponentBase
@inject IApiHelper ApiHelper
@inject ILoggedInUserModel LoggedInUserModel
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager


<div>
	<GlobalJsInteropInitializer />
	<Navigation IsAuthenticated="@IsAuthenticated" Username="@Username" UserRoles="@UserRoles" />

	<main id="content-container" class="container content-container">
		<article class="content px-4 bg-content">
			@if (IsLoading)
			{
				<Loading />
			}
			else if (HasConnectionError)
			{
				<ConnectionErrorMessage ExceptionObject="ExceptionObject" />
			}
			else if (NotFound)
			{
				<NotFound />
			}
			else if (IsAuthenticated)
			{
				@Body
			}
			else
			{
				<LoginMessage/>
			}
		</article>
	</main>

	<Footer></Footer>
</div>

@code {
	[Inject] private IUserEndpoint _userEndpoint { get; set; }
	[CascadingParameter] public bool NotFound { get; set; }

	private Exception? ExceptionObject { get; set; }
	private bool IsLoading { get; set; } = true;
	private bool HasConnectionError => ExceptionObject != null;
	private string Username { get; set; } = "user";
	private bool IsAuthenticated => LoggedInUserModel?.IsAuthenticated ?? false;
	private List<string> UserRoles { get; set; }

	protected override async Task OnInitializedAsync()
	{
		NavigationManager.LocationChanged += HandleLocationChanged;
		
		await Task.Delay(1000); // Simulate loading time
		await ValidateTokenAndHandleErrors();
		IsLoading = false;
		StateHasChanged();
	}

	private async void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
	{
		IsLoading = true;
		StateHasChanged();
		
		if (!e.IsNavigationIntercepted)
			await Task.Delay(500); // Simulate loading time
		
		await ValidateTokenAndHandleErrors(); // Add this line to await the completion of this method
		
		IsLoading = false;
		StateHasChanged();
	}

	private async Task ValidateTokenAndHandleErrors()
	{
		try
		{
			await ApiHelper.PingServer(); // Add this line to check the connection to the server
			await ValidateToken();
			ExceptionObject = null;
		}
		catch (HttpRequestException exception)
		{
			if (exception.StatusCode == System.Net.HttpStatusCode.Unauthorized)
			{
				await LocalStorage.RemoveItemAsync("authToken");
				NavigationManager.NavigateTo("/", true, true);
			}
			else
			{
				ExceptionObject = exception;
			}
		}
	}

	private bool IsInRole(string role)
	{
		return UserRoles?.Any(x => string.Equals(x, role, StringComparison.CurrentCultureIgnoreCase)) ?? false;
	}

	private async Task ValidateToken()
	{
		var token = await LocalStorage.GetItemAsync<string>("authToken");
		
		try
		{
			await ApiHelper.GetLoggedInUserInfo(token);
			
			// I guess we'll need to find out user-roles too, if we want to know who's admin or not
			var allUsers = await _userEndpoint.GetAll();
			var loggedInUser = allUsers.FirstOrDefault(x => x.Id == LoggedInUserModel.Id);
			if (loggedInUser != null)
				UserRoles = loggedInUser.Roles.Values.ToList();
		}
		catch (ApiException ex)
		{
			// Let's ignore Unauthorized exceptions from the server. We are clearly not logged in.
			// We do this so we can fall-through to hit the <LoginMessage /> component.
			if (ex.Message.Contains("Unauthorized"))
				return;
			
			// Handle ApiException (e.g., show a message or log the error)
			ExceptionObject = ex;
		}
		catch (Exception ex)
		{
			// Handle other exceptions (e.g., show a message or log the error)
			ExceptionObject = ex;
		}		
		
		if (LoggedInUserModel.IsAuthenticated)
			Username = LoggedInUserModel.FirstName;
		else
		{
			await LocalStorage.RemoveItemAsync("authToken");
			NavigationManager.NavigateTo("/", true, true);
		}
	}

	protected void Dispose()
	{
		NavigationManager.LocationChanged -= HandleLocationChanged;
	}
}

