@page "/userroles"

<h1>User Administration</h1>

<div class="row">
	<div class="col-md-4">
		<h2>Users</h2>
		<div class="list-group">
			@foreach (var user in Users)
			{
				<button type="button" class="list-group-item list-group-item-action" @onclick="() => OnUserSelectionChanged(user)">
					<div>@user.Username</div>
					<small>
						@foreach (var role in user.Roles)
						{
							<span class="badge badge-warning text-dark">@role.Value</span>
						}
					</small>
				</button>
			}
		</div>
	</div>
	<div class="col-md-4">
		<h2>@SelectedUserName</h2>
		<h3>Current Roles</h3>
		<div>
			@foreach (var role in UserRoles)
			{
				<div>
					<span>@role</span>
					<button class="btn btn-danger btn-sm" @onclick="@(async () => await RemoveSelectedRole(SelectedUser.Id, role))">Remove</button>
				</div>
			}
		</div>
	</div>
	<div class="col-md-4">
		<h2>Add Role</h2>
		<div>
			@foreach (var role in AvailableRoles)
			{
				<div>
					<span>@role</span>
					<button class="btn btn-success btn-sm" @onclick="@(async () => await AddSelectedRole(role))">Add</button>
				</div>
			}
		</div>
	</div>
</div>


@code {
	[Inject] private IUserEndpoint _userEndpoint { get; set; }

	protected List<UserModel> Users { get; set; } = new List<UserModel>();
	protected UserModel SelectedUser { get; set; }
	protected List<string> UserRoles { get; set; } = new List<string>();
	protected List<string> AvailableRoles { get; set; } = new List<string>();
	protected string SelectedUserName => SelectedUser?.Username;
	protected string SelectedAvailableRole { get; set; }
	
	protected override async Task OnInitializedAsync()
	{
		await LoadUsers();
	}

	private async Task LoadUsers()
	{
		var users = await _userEndpoint.GetAll();
		Users = new List<UserModel>(users);
		
		if (Users.Count > 0)
		{
			OnUserSelectionChanged(Users.First());
		}
	}

	private async Task LoadRolesForUser(UserModel user)
	{
		UserRoles = user.Roles.Values.ToList();
		var allRoles = await _userEndpoint.GetAllRoles();
		AvailableRoles = allRoles
			.Select(role => role.Value)
			.Where(role => !UserRoles.Contains(role))
			.ToList();
	}

	private void OnUserSelectionChanged(UserModel user)
	{
		SelectedUser = user;
		_ = LoadRolesForUser(user);
	}

	private async Task AddSelectedRole()
	{
		await _userEndpoint.AddUserToRole(SelectedUser.Id, SelectedAvailableRole);

		UserRoles.Add(SelectedAvailableRole);
		AvailableRoles.Remove(SelectedAvailableRole);
	}
	
	private async Task AddSelectedRole(string role)
	{
		await _userEndpoint.AddUserToRole(SelectedUser.Id, role);

		UserRoles.Add(role);
		AvailableRoles.Remove(role);
	}
	private async Task RemoveSelectedRole(string userId, string roleValue)
	{
		await _userEndpoint.RemoveUserFromRole(userId, roleValue);

		if (SelectedUser != null && SelectedUser.Id == userId)
		{
			UserRoles.Remove(roleValue);
			AvailableRoles.Add(roleValue);
		}
	}

}
