@page "/userroles"

<h1>User Administration</h1>

<div class="row">
	<div class="col-md-4">
		<h2>Users</h2>
		<div class="list-group-wrapper d-flex flex-column">
			<div class="list-group">
				@foreach (var user in Users)
				{
					<button type="button" class="list-group-item list-group-item-action @SelectedClass" @onclick="() => OnUserSelectionChanged(user)">
						<h4>@user.Username</h4>
						<h6>@user.Email</h6>
						<small>
							@foreach (var role in user.Roles.OrderBy(x => x.Value))
							{
								<span class="badge bg-dark-subtle text-dark m-1">@role.Value</span>
							}
						</small>
					</button>
				}
			</div>
		</div>
	</div>
	<div class="col-md-4">
		@if (SelectedUser != null)
		{
			<h2>Current Roles: <span>@SelectedUser.Email</span></h2>
			<div class="list-group">
				@foreach (var role in UserRoles.OrderBy(x => x))
				{
					<div class="d-flex flex-row list-group-item justify-content-between p-2 m-1">
						<span>@role</span>
						<button class="btn btn-danger btn-sm" @onclick="@(async () => await RemoveSelectedRole(SelectedUser.Id, role))">Remove</button>
					</div>
				}
			</div>
		}
	</div>
	<div class="col-md-4">
		@if (SelectedUser != null)
		{
			<h2>Add Role</h2>
			<div class="list-group-wrapper d-flex flex-column">
				<div class="list-group">
					@foreach (var role in AvailableRoles)
					{
						<div class="d-flex flex-row list-group-item justify-content-between p-2 m-1">
							<span>@role</span>
							<button class="btn btn-success btn-sm" @onclick="@(async () => await AddSelectedRole(role))">Add</button>
						</div>
					}
				</div>
			</div>
		}
	</div>
</div>


@code {
	[Inject] private IUserEndpoint _userEndpoint { get; set; }

	protected List<UserModel> Users { get; set; } = new List<UserModel>();
	protected UserModel SelectedUser { get; set; }
	protected List<string> UserRoles { get; set; } = new List<string>();
	protected List<string> AvailableRoles { get; set; } = new List<string>();
	protected string SelectedUserName => SelectedUser?.Username;
	
	protected string SelectedClass => SelectedUser != null ? "selected-user" : "";
	
	protected override async Task OnInitializedAsync()
	{
		await LoadUsers();
	}

	private async Task LoadUsers()
	{
		var users = await _userEndpoint.GetAll();
		Users = new List<UserModel>(users);

		if (Users.Any())
		{
			SelectedUser = Users.First();
			await LoadRolesForUser(SelectedUser);
		}
	}

	private async Task LoadRolesForUser(UserModel user)
	{
		UserRoles = user.Roles.Values.ToList();
		var allRoles = await _userEndpoint.GetAllRoles();
		AvailableRoles = allRoles
			.Select(role => role.Value)
			.Where(role => !UserRoles.Contains(role))
			.ToList();
	}

	private async Task OnUserSelectionChanged(UserModel user)
	{
		SelectedUser = user;
		await LoadRolesForUser(user);
	}

	private async Task AddSelectedRole(string role)
	{
		await _userEndpoint.AddUserToRole(SelectedUser.Id, role);

		UserRoles.Add(role);
		AvailableRoles.Remove(role);
		await LoadUsers();
	}
	private async Task RemoveSelectedRole(string userId, string roleValue)
	{
		await _userEndpoint.RemoveUserFromRole(userId, roleValue);

		if (SelectedUser.Id == userId)
		{
			UserRoles.Remove(roleValue);
			AvailableRoles.Add(roleValue);
			await LoadUsers();
		}
	}

}
