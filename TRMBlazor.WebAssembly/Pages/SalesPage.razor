@page "/"
@page "/sales"
@using TRMFrontEnd.Library.Helpers

<h1>Sales Page</h1>

<div class="container">
    <div class="row">
        <!-- Column 0 -->
        <div class="col-md-5">
	        <h2>Items</h2>
	        <div class="list-group-wrapper d-flex flex-column">
		        <div class="list-group">
			        @foreach (var product in Products)
			        {
				        <ProductListItem Product="product" OnProductSelected="(p => SelectedProduct = p)" SelectedProduct="SelectedProduct" />
			        }
		        </div>
	        </div>
        </div>
        
		<!-- Column 1 -->
		<div class="col-md-2">
		    <div class="flex-container">
		        <div class="form-group">
		            <label for="itemQuantity">Quantity</label>
		            <input id="itemQuantity" class="form-control" type="number" min="1" @bind="ItemQuantity" />
		        </div>
		        <button class="btn btn-success mt-5" @onclick="AddToCart" disabled="@(!CanAddToCart)">Add to Cart</button>
		        <button class="btn btn-danger mt-5" @onclick="RemoveFromCart" disabled="@(!CanRemoveSelectedFromCart)">Remove 1 from Cart</button>
		    </div>
		</div>

        <!-- Column 2 -->
        <div class="col-md-5">
		    <h2>Cart</h2>
		    <div class="list-group-wrapper d-flex flex-column">
		        <ul class="list-group">
		            @foreach (var item in Cart)
		            {
			            <CartItem Item="item" OnItemRemoved="() => RemoveSelectedFromCart(item)" OnItemSelected="(i => SelectedCartItem = i)" SelectedCartItem="SelectedCartItem" />
		            }
		        </ul>
		    </div>
			<dl class="row mt-2">
			    <dt class="col-sm-6">Sub-Total:</dt>
			    <dd class="col-sm-6 right-aligned">@SubTotal.ToString("C")</dd>
			    <dt class="col-sm-6">Tax:</dt>
			    <dd class="col-sm-6 right-aligned">@Tax.ToString("C")</dd>
			    <dt class="col-sm-6">Total:</dt>
			    <dd class="col-sm-6 right-aligned">@Total.ToString("C")</dd>
			</dl>
            <button class="btn btn-success float-end" @onclick="CheckOut" disabled="@(!CanCheckOut)">Check Out</button>
        </div>
    </div>
</div>

@code {
[Inject] public IProductEndpoint ProductEndpoint { get; set; }
	[Inject] public IConfigHelper ConfigHelper { get; set; }
	[Inject] public ISaleEndpoint SaleEndpoint { get; set; }

	public List<ProductModel> Products { get; set; } = new();
	public List<CartItemModel> Cart { get; } = new();

	public ProductModel SelectedProduct { get; set; }
	public CartItemModel SelectedCartItem { get; set; }

	public int ItemQuantity { get; set; } = 1;

	public decimal SubTotal => CalculateSubTotal();
	public decimal Tax => CalculateTotalTax();
	public decimal Total => CalculateSubTotal() + CalculateTotalTax();


	protected override async Task OnInitializedAsync()
	{
		await LoadProducts();
	}
	
	private async Task ResetSalesViewModel()
	{
		Cart.Clear();
		await LoadProducts();
	}

	public async Task LoadProducts()
	{
		var productList = await ProductEndpoint.GetAll();
		Products = new List<ProductModel>(productList);
	}

	private decimal CalculateSubTotal() => Cart.Sum(item => (item.Product.RetailPrice * item.QuantityInCart));
	private decimal CalculateTotalTax()
	{
		decimal taxRate = ConfigHelper.GetTaxRate() / 100;
		return Cart
			.Where(item => item.Product.IsTaxable)
			.Sum(item => (item.Product.RetailPrice * item.QuantityInCart) * taxRate);
	}

	public bool CanAddToCart => ItemQuantity > 0 && SelectedProduct?.QuantityInStock >= ItemQuantity;
	public void AddToCart()
	{
		var existingItem = Cart.FirstOrDefault(x => x.Product == SelectedProduct);
		if (existingItem != null)
		{
			existingItem.QuantityInCart += ItemQuantity;
		}
		else
		{
			var item = new CartItemModel
			{
				Product = SelectedProduct,
				QuantityInCart = ItemQuantity
			};

			Cart.Add(item);
		}

		SelectedProduct.QuantityInStock -= ItemQuantity;
		ItemQuantity = 1;
	}

	public bool CanRemoveFromCart => Cart.Any();
	public bool CanRemoveSelectedFromCart => Cart.Any() && SelectedCartItem?.QuantityInCart > 0;

	public void RemoveFromCart()
	{
		SelectedCartItem.Product.QuantityInStock += 1;
		SelectedCartItem.QuantityInCart -= 1;
		if (SelectedCartItem.QuantityInCart < 1)
			Cart.Remove(SelectedCartItem);
	}

	public void RemoveSelectedFromCart(CartItemModel item)
	{
		item.Product.QuantityInStock += item.QuantityInCart;
		Cart.Remove(item);
	}

	public bool CanCheckOut => Cart.Any();
	public async Task CheckOut()
	{
		// create a SaleModel and post to api
		var sale = new SaleModel();
		foreach (var item in Cart)
		{
			sale.SaleDetails.Add(new SaleDetailModel
			{
				ProductId = item.Product.Id,
				Quantity = item.QuantityInCart
			});
		}

		await SaleEndpoint.PostSale(sale);
		
		await ResetSalesViewModel();
	}
}
