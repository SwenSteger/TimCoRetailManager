@page "/login"
@using System.Net
@inject IApiHelper ApiHelper
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

<h1>Login</h1>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
	<div class="alert alert-danger" role="alert">
		@ErrorMessage
	</div>
}

<div class="form-group">
	<label for="username">Username</label>
	<input type="text" class="form-control" id="username" @bind="Username" />
</div>

<div class="form-group">
	<label for="password">Password</label>
	<input type="password" class="form-control" id="password" @bind="Password" />
</div>
<br />
<button type="submit" class="btn btn-primary" @onclick="HandleLogin">Login</button>

@code {
	[Parameter] public EventCallback ClearErrorMessageCallback { get; set; }
	
	private string Username { get; set; }
	private string Password { get; set; }
	private string ErrorMessage { get; set; }

	private async Task HandleLogin()
	{
		if (string.IsNullOrEmpty(Username) || string.IsNullOrEmpty(Password))
		{
			ErrorMessage = "Username and password are required";
			return;
		}

		try
		{
			// TODO: Add error handling that throws proper HttpRequestExceptions
			var result = await ApiHelper.Authenticate(Username, Password);
			if (result != null)
			{
				await LocalStorage.SetItemAsync("authToken", result.Access_Token);
				await ApiHelper.GetLoggedInUserInfo(result.Access_Token);
				NavigationManager.NavigateTo("/", true, true);
			}
		}
		catch (Exception ex)
		{
			if (ex.Message.Contains("Bad Request"))
				ErrorMessage = "Invalid username or password";
			else if (ex.Message.Contains("Failed to fetch"))
				ErrorMessage = "Unable to connect to the authentication service. Please check your network connection and try again.";
			else 
				ErrorMessage = $"An error occurred while authenticating: {ex.Message}";
		}
	}
	
	public void ClearErrorMessage()
	{
		ErrorMessage = string.Empty;
		StateHasChanged();
	}
}