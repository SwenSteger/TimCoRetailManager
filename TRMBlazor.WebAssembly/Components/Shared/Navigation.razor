@using TRMBlazor.WebAssembly.Pages
@inject IApiHelper ApiHelper
@inject ILoggedInUserModel LoggedInUserModel
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

<nav class="navbar navbar-expand navbar-dark bg-header">
	<div class="container d-flex flex-row justify-content-between">
		<div class="branding">
			<NavLink class="navbar-brand" href="" Match="NavLinkMatch.All">
				<span class="brand-img">
					<img src="/favicon.png" alt="Portfolio" class="img-fluid mr-2">
				</span>
				<span class="brand-title">TimCo RM</span>
			</NavLink>
		</div>

		@if (IsAuthenticated)
		{
			<ul class="navbar-nav me-auto">
				<li class="nav-item">
					<NavLink class="nav-link" href="" Match="NavLinkMatch.All">
						<span class="oi oi-cart" aria-hidden="true"></span> Sales
					</NavLink>
				</li>
				<li class="nav-item">
					<NavLink class="nav-link" href="/profile" Match="NavLinkMatch.Prefix">
						<span class="oi oi-user" aria-hidden="true"></span> Profile
					</NavLink>
				</li>
			</ul>
			<div class="welcome_user">
				<span>Welcome, @Username</span>
				<button class="btn btn-danger my-2 my-sm-0" @onclick="HandleLogout">Logout</button>
			</div>
		}
		else
		{
			<div class="welcome_user">
				<button type="button" class="btn btn-outline-danger my-2 my-sm-0" data-bs-toggle="modal" data-bs-target="#loginModal">Login</button>
				<a href="/register" class="btn btn-outline-success my-2 my-sm-0">Register</a>
			</div>
		}
	</div>
</nav>

<div class="modal fade" id="loginModal" tabindex="-1" role="dialog" aria-labelledby="loginModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="loginModalLabel">Login</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <Login />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>



@code {
	private string Username { get; set; } = "user";
	private bool IsAuthenticated => LoggedInUserModel?.IsAuthenticated ?? false;

    protected override async Task OnInitializedAsync()
    {
	    await ValidateToken();
	    NavigationManager.LocationChanged += HandleLocationChanged;
    }

	private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
	{
		Console.WriteLine($"URL of new location: {e.Location}");
	}

	public void Dispose()
	{
		NavigationManager.LocationChanged -= HandleLocationChanged;
	}

    private async Task ValidateToken()
	{
		var token = await LocalStorage.GetItemAsync<string>("authToken");
		if (token != null)
		{
			await ApiHelper.GetLoggedInUserInfo(token);
			Username = LoggedInUserModel.FirstName;
		}
	}

    private async Task HandleLogout()
    {
	    await LocalStorage.RemoveItemAsync("authToken");
	    LoggedInUserModel = null;
	    NavigationManager.NavigateTo("/", true, true);
    }
}